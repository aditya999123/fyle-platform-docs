openapi: 3.0.3
info:
  version: '1.0'
  title: Admin APIs
  contact:
    name: Integrations
    email: support@fylehq.com
servers:
  - url: 'https://platform.fylehq.com/v1'
    description: Live Server
components:
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://accounts.fylehq.com/app/developers/#/oauth/authorize'
          tokenUrl: 'https://accounts.fylehq.com/oauth/token'
          scopes:
            admin.*: Grant all ADMIN actions
  parameters:
    created_at:
      in: query
      name: created_at
      description: >
        Date string in yyyy-MM-ddTHH:mm:ss.SSSZ format along with operator in
        RHS dot pattern.<br>

        Supported operators are `gte`,`lte`,`gt`,`lt`.<br>

        created_at=gte.2020-06-01T00:00:00.000Z filters all objects created on
        or after 1st Jun 2020.<br>

        created_at=gte.2020-06-01T00:00:00.000Z&created_at=lt.2020-07-01T00:00:00.000Z
        filters all objects `created` in the month of Jun 2020.<br>
      schema:
        type: string
        example: >-
          created_at=gte.2020-06-01T00:00:00.000Z&created_at=lt.2020-07-01T00:00:00.000Z
    updated_at:
      in: query
      name: updated_at
      description: >
        Date string in yyyy-MM-ddTHH:mm:ss.SSSZ format along with operator in
        RHS dot pattern.<br>

        Supported operators are `gte`,`lte`,`gt`,`lt`.<br>

        updated_at=gte.2020-06-01T00:00:00.000Z filters all objects updated on
        or after 1st Jun 2020.<br>

        updated_at=gte.2020-06-01T00:00:00.000Z&updated_at=lt.2020-07-01T00:00:00.000Z
        filters all objects `updated` in the month of Jun 2020.<br>
      schema:
        type: string
        example: >-
          updated_at=gte.2020-06-01T00:00:00.000Z&updated_at=lt.2020-07-01T00:00:00.000Z
    display_name:
      in: query
      name: display_name
      description: |
        Supported operators are `eq`, `like`, `in`.<br>
        display_name=in.(value1,value2)
      schema:
        type: string
        example: like.Fast*
    is_enabled:
      in: query
      name: is_enabled
      description: |
        This param is used to filer records by
        Supported operators are `eq`.<br>
      schema:
        type: string
        example: eq.true
    offset:
      in: query
      name: offset
      description: |
        offset is used to skip that many number of objects before counting. <br>
      schema:
        type: integer
        example: 10
    limit:
      in: query
      name: limit
      description: >
        A limit on the number of objects to be returned. Allowed values are from
        1 to 200.
      schema:
        type: integer
        example: 20
        default: 50
        maximum: 200
    order:
      in: query
      name: order
      description: |
        use comma separated column names for sorting the results. <br>
        For sorting in descending order, use `column_name.desc`
      schema:
        type: string
        example: 'updated_at.desc,id'
  schemas:
    '400':
      type: object
      properties:
        message:
          type: string
          description: |
            Message describing why the request is valid
    '401':
      type: object
      properties:
        message:
          enum:
            - invalid token
          type: string
          description: >
            This error means that the input access token is either not issued by
            Fyle or has expired.

            You need to generate a new access token.
    '403':
      type: object
      properties:
        message:
          enum:
            - Forbidden
          type: string
          description: >
            This error means current user does not have enough permissions to
            perform this operation.
    count:
      type: integer
      description: |
        The total number of objects that can be requested.
      example: 10000
    offset:
      description: >
        offset is used to skip that many number of objects before counting. <br>

        For example, if there are 2000 objects, <br>

        The first request will have offset as 0 and limit as 1000 to return
        first 1000 objects. <br>

        The second request will have offset as 1000 and limit as 1000 to return
        next 1000 objects. <br>
      type: integer
      example: 10
    url:
      type: string
    id_string:
      type: string
      maxLength: 10
      description: |
        This id provided by Fyle to identify an object.
      example: sdfd2391
    org_id:
      type: string
      description: |
        The unique id of the Organization to which the object is associated.
      readOnly: true
      example: orwruogwnngg
    created_at:
      type: string
      description: |
        Signifies when this object was created.
      example: '2020-06-01T13:14:54.804'
    updated_at:
      type: string
      description: |
        Signifies when this object was updated.
      example: '2020-06-11T13:14:55.201598'
    project_out:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        org_id:
          $ref: '#/components/schemas/org_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        name:
          type: string
          maxLength: 255
          description: Represents the name of the project.
          example: Fast and Furious
        sub_project:
          type: string
          nullable: true
          maxLength: 255
          description: Represents the name of the sub_project.
          example: Formula One
        display_name:
          type: string
          maxLength: 513
          description: >
            This is a combination of name and sub_project separated by a / and
            spaces.

            In case if no sub_project is present it is same as name of the
            project.
          example: Fast and Furious / Formula One
        code:
          type: string
          maxLength: 255
          description: |
            This represents the code of project.
          example: FF-032
        description:
          type: string
          nullable: true
          maxLength: 255
          description: |
            This represents the description of project.
          example: Win the trophy
        is_enabled:
          type: boolean
          description: >
            This indicates if the project is enabled for use within the
            organisation.
          default: true
          example: true
        category_ids:
          type: array
          description: >
            Has the list of all category ids that are applicable for this
            project.
          items:
            type: integer
    project_in:
      type: object
      properties:
        id:
          type: string
          maxLength: 10
          description: >
            This id provided by Fyle to identify a project from this
            organisation.

            This id is a numeric string.

            This id is unique within the organisation.
          readOnly: true
          example: '2391'
        org_id:
          $ref: '#/components/schemas/org_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        name:
          type: string
          maxLength: 255
          description: Represents the name of the project.
          example: Fast and Furious
        sub_project:
          type: string
          maxLength: 255
          description: Represents the name of the sub_project.
          example: Formula One
        display_name:
          type: string
          maxLength: 513
          description: >
            This is a combination of name and sub_project separated by a / and
            spaces.

            In case if no sub_project is present it is same as name of the
            project.
          example: Fast and Furious / Formula One
        code:
          type: string
          maxLength: 255
          description: |
            This represents the code of project.
          example: FF-032
        description:
          type: string
          maxLength: 255
          description: |
            This represents the description of project.
          example: Win the trophy
        is_enabled:
          type: boolean
          description: >
            This indicates if the project is enabled for use within the
            organisation.
          default: true
          example: true
        category_ids:
          type: array
          description: >
            Has the list of all category ids that are applicable for this
            project.
          items:
            type: int
          example:
            - - 16570
tags:
  - name: Employees
    description: |
      These APIs gives you access to manage your organisation's Employees data.
  - name: Expenses
    description: |
      This API gives you access to your organisation's Expenses data.
  - name: Expense Fields
    description: |
      This API gives you access to your organisation's Expense Fields data.
  - name: Reports
    description: |
      This API gives you access to your organisation's Expense Reports data.
  - name: Advances
    description: |
      This API gives you access to Issued Advances data of your organisation.
  - name: Advance Requests
    description: |
      This API gives you access to your organisation's Advance Requests data.
  - name: Reimbursements
    description: >
      These APIs gives you access to manage your organisation's Reimbursements
      data.
  - name: Refunds
    description: |
      These APIs gives you access to manage your organisation's Refunds data.
  - name: Settlements
    description: >
      These APIs gives you access to manage your organisation's Settlements
      data.
  - name: Balance Transfers
    description: >
      These APIs gives you access to manage your organisation's Balance
      Transfers data.
  - name: Projects
    description: |
      These APIs gives you access to manage your organisation's Projects data.
  - name: Cost Centers
    description: >
      These APIs gives you access to manage your organisation's Cost Centers
      data.
  - name: Categories
    description: |
      These APIs gives you access to manage your organisation's Categories data.
paths:
  /admin/projects:
    get:
      tags:
        - Projects
      summary: List projects
      operationId: get-projects
      parameters:
        - $ref: '#/components/parameters/created_at'
        - $ref: '#/components/parameters/updated_at'
        - $ref: '#/components/parameters/display_name'
        - $ref: '#/components/parameters/is_enabled'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  url:
                    $ref: '#/components/schemas/url'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/project_out'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
    post:
      tags:
        - Projects
      summary: Create or update a project
      description: |
        Create or update a project.
      operationId: post-projects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/project_in'
              required:
                - data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    example: /admin/projects
                  data:
                    $ref: '#/components/schemas/project_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
